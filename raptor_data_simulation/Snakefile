import subprocess
import os.path

# All parameters are set in config.yaml
configfile: "../simulation_config.yaml"

# Simulating reference
part_nr = config["reference_parts"]
length = config["ref_size"]
bin_nr = config["number_of_bins"]
ht = config["haplotype_count"]

# Simulating reads
epr = config["errors_per_read"]
rl = config["read_length"]
rpg = config["reads_per_genome"]

# An equal number of reads is sampled from each genome
rc = rpg * ht * bin_nr

# Helper variables
bins = [*range(0, bin_nr, 1)]
parts =[*range(0, part_nr, 1)]

rule make_all:
	input:
		reads = expand("../../NO_BACKUP/simulated_metagenome/reads/{bin}.fastq", bin=bins)
	params:
		t = 1
	resources:
		nodelist = "cmp[241]"
	shell:
		"echo 'Done'"

rule create_ref:		
	output:
		"../../NO_BACKUP/simulated_metagenome/bins/ref.fasta"
	params:
		t = 1
	resources:
		nodelist = "cmp[241]"
	shell:
		"./scripts/create_ref.sh {length}"

rule divide_into_bins:		
	input:
		"../../NO_BACKUP/simulated_metagenome/bins/ref.fasta"
	output:
		expand("../../NO_BACKUP/simulated_metagenome/bins/{bin}.fasta", bin=bins)
	params:
		t = 1
	resources:
		nodelist = "cmp[241]"
	shell:
		"./scripts/divide_into_bins.sh {length} {bin_nr} {ht}"

rule sample_reads:
	input:
		"../../NO_BACKUP/simulated_metagenome/bins/{bin}.fasta"
	output:
		"../../NO_BACKUP/simulated_metagenome/reads/{bin}.fastq"
	params:
		t = 2
	resources:
		nodelist = "cmp[241]"
	shell:
		"./scripts/sample_reads.sh {bin_nr} {epr} {rl} {rc} {ht}"
